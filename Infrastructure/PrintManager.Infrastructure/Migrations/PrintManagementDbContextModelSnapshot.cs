// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintManager.Infrastructure.Persistence.DBContexts;

#nullable disable

namespace PrintManager.Infrastructure.Migrations
{
    [DbContext(typeof(PrintManagementDbContext))]
    partial class PrintManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrintManager.Domain.DepartmentAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("PrintManager.Domain.PrintDeviceAggregate.PrintDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PrintingDevices", (string)null);
                });

            modelBuilder.Entity("PrintManager.Domain.PrintSessionAggregate.PrintSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("PrintManager.Domain.DepartmentAggregate.Department", b =>
                {
                    b.OwnsMany("PrintManager.Domain.DepartmentAggregate.Entities.DepartmentPrintDevice", "PrintDevices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("DepartmentDeviceId");

                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InnerName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<bool>("IsDefaultDevice")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<byte>("SerialNumber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)1);

                            b1.HasKey("Id", "DepartmentId");

                            b1.HasIndex("DepartmentId");

                            b1.ToTable("InnerDepartmentDevices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.OwnsMany("PrintManager.Domain.DepartmentAggregate.Entities.Employee", "Employees", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("EmployeeId");

                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("JobTitle")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id", "DepartmentId");

                            b1.HasIndex("DepartmentId");

                            b1.ToTable("Employees", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.Navigation("Employees");

                    b.Navigation("PrintDevices");
                });

            modelBuilder.Entity("PrintManager.Domain.PrintDeviceAggregate.PrintDevice", b =>
                {
                    b.OwnsMany("PrintManager.Domain.PrintDeviceAggregate.Entities.MAC", "MACs", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("MacAddress")
                                .IsRequired()
                                .HasColumnType("binary(6)");

                            b1.Property<Guid>("PrintDeviceId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("PrintDeviceId");

                            b1.ToTable("MACAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PrintDeviceId");
                        });

                    b.Navigation("MACs");
                });
#pragma warning restore 612, 618
        }
    }
}
